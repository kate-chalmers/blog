[
  {
    "objectID": "posts/spotify api/index.html",
    "href": "posts/spotify api/index.html",
    "title": "Post #1: Blog Post (Taylor’s Version)",
    "section": "",
    "text": "library(tidyverse)\nlibrary(spotifyr)\nlibrary(ggridges)\nlibrary(RColorBrewer)\n\n# Stored API code in config folder and added to gitignore file\n# source(\"./posts/spotify api/config.R\")\nsource(\"./config.R\")\n\n# Access API username + id\nSys.setenv(SPOTIFY_CLIENT_ID = spotify_id)\nSys.setenv(SPOTIFY_CLIENT_SECRET = spotify_code)\n\nspotify_access_token <- get_spotify_access_token()\n\nspotify_id <- function(artist_name) {\n  \n  # Removed print so there is no echo in Quarto doc\n  artist_id <- search_spotify(artist_name, type = \"artist\") %>%\n    select(id) %>%\n    slice(1) %>%\n    as.character()\n  \n  return(artist_id)\n   \n}\n\ntswift_id <- spotify_id(\"Taylor Swift\")\n\n# Pull Taylor's music\ntswift_spotify <- spotifyr::get_artist_audio_features(\n  artist = tswift_id,\n  include_groups = \"album\",\n  authorization = spotify_access_token\n)\n\n# Filter for Taylor's Version + Originals\ntaylors_version <- tswift_spotify %>%\n  filter(grepl(\"Taylor's Version\", album_name) | grepl(\"Red\", album_name) | grepl(\"Fearless\", album_name) | grepl(\"Speak Now\", album_name)) %>%\n  filter(!grepl(\"International\", album_name), !grepl(\"From The Vault\", track_name), !grepl(\"Live\", album_name), !album_name == \"Speak Now\")\n\n# Exploring speechiness outlier\ntv_annote <- taylors_version %>%\n  filter(grepl(\"Red\", album_name)) %>%\n  select(album_name, track_name, value = speechiness) %>%\n  arrange(-value) %>%\n  mutate(metric = \"speechiness\",\n         album_name = paste0(\"<b>\", album_name, \"</b>\")) %>%\n  slice_head(n=1)\n\n# Added some factoring and text decoration\ntaylors_version |>\n  mutate(album_name = ifelse(grepl(\"Taylor's Version\", album_name), paste0(\"<b>\", album_name, \"</b>\"), album_name),\n         album_name = factor(album_name, rev(c(\"Fearless (Platinum Edition)\", \"<b>Fearless (Taylor's Version)</b>\",\n                                           \"Speak Now (Deluxe Package)\", \"<b>Speak Now (Taylor's Version)</b>\",\n                                           \"Red (Deluxe Edition)\", \"<b>Red (Taylor's Version)</b>\")))\n  ) %>%\n  tidyr::pivot_longer(cols = c(\"valence\",\"tempo\",\"danceability\",\"energy\", \"speechiness\", \"acousticness\"), names_to = \"metric\") |>\n  ggplot(aes(x = value, y = album_name, fill=factor(metric))) +\n    geom_density_ridges(show.legend = FALSE) +\n    theme_ridges() +\n    labs(title = \"Taylor Swift - Musical features of studio albums for original releases vs. re-recordings\",\n         subtitle = \"Based on Spotify's Web API with spotifyr\",\n         y=NULL,\n         x=NULL)+\n  geom_text(data=tv_annote, label=\"We Are Never Ever \\nGetting Back Together\", vjust=-0.5, hjust=0.8, family=\"Avenir\", size=1.5) +\n  facet_wrap(~metric, scales = \"free_x\", nrow = 2,\n               labeller = as_labeller(\n                 c(`danceability`=\"Danceability\", \n                   `energy` = \"Energy\",\n                   `acousticness` = \"Acousticness\", \n                   `speechiness` = \"Speechiness\",\n                   `tempo` = \"Tempo\", \n                   `valence` = \"Valence\")\n               ))+\n  rcartocolor::scale_fill_carto_d(palette=\"Temps\") +\n  theme(plot.title.position =  \"plot\",\n        axis.text.x = element_text(angle=45),\n        text = element_text(family=\"Avenir Next\"),\n        axis.text.y=ggtext::element_markdown())"
  },
  {
    "objectID": "posts/artist evaluation/index.html",
    "href": "posts/artist evaluation/index.html",
    "title": "Post #2: I don’t want peace, I want problems, always",
    "section": "",
    "text": "library(tidyverse)\nlibrary(spotifyr)\nlibrary(ggtext)\n\n# Stored API code in config folder and added to gitignore file\n# source(\"./posts/spotify api/config.R\")\nsource(\"./config.R\")\n\n# Access API username + id\nSys.setenv(SPOTIFY_CLIENT_ID = spotify_id)\nSys.setenv(SPOTIFY_CLIENT_SECRET = spotify_code)\n\nspotify_access_token <- get_spotify_access_token()\n\nspotify_id <- function(artist_name) {\n  \n  # Removed print so there is no echo in Quarto doc\n  artist_id <- search_spotify(artist_name, type = \"artist\") %>%\n    select(id) %>%\n    slice(1) %>%\n    as.character()\n  \n  return(artist_id)\n   \n}\n\nartists_i_like <- c(\"Taylor Swift\", \n                    \"Bon Iver\",\n                    \"Leif Vollebekk\",\n                    \"Glass Animals\",\n                    \"Noah Kahan\",\n                    \"Hozier\")\n\n# Practice with lapply + map :)\ndat <- lapply(artists_i_like, search_spotify, type = \"artist\") \n\nartists <- dat %>% \n  map( ~ .x %>% \n         as.data.frame() %>%\n         slice(1) %>%\n         pull(id)) %>%\n  unlist() %>%\n  # Use map instead of a loop to keep a clean env\n  map( ~ .x %>%\n         get_artist_audio_features(.,\n                                   include_groups = \"album\",\n                                   authorization = spotify_access_token)) %>%\n  do.call(rbind.data.frame, .)\n\nannotater <- function(x_val, y_val, text_used) {\n  annotate(\"richtext\", x = x_val, y = y_val, label = text_used, size = 6, alpha=0.9, label.color = NA, family=\"Avenir Next\")\n\n}\n\n# Apparently I don't like peace ;(\nartists |>\n  # Feed into ggplot\n  ggplot(aes(y=energy,x=valence,color=artist_name))+\n  geom_point(aes(shape=artist_name), size = 2)+\n  geom_hline(yintercept = 0.5)+\n  geom_vline(xintercept = 0.5)+\n  annotater(x_val = 0.1, y_val = 1, text_used = \"Turbulent/Angry\") +\n  annotater(x_val = 0.8, y_val = 1, text_used = \"Happy/Joyful\") +\n  annotater(x_val = 0.1, y_val = 0.1, text_used = \"Sad/Depressing\") +\n  annotater(x_val = 0.8, y_val = 0.1, text_used = \"Chill/Peaceful\") +\n  # Threw in oecdplot package for fun\n  oecdplot::scale_colour_oecd_d(option=\"ppt\") +\n  theme_light() + \n  scale_shape_manual(values = c(1:8))+\n  labs(y = \"Energy\", x = \"Valence\") +\n  theme(legend.position = \"top\",\n        legend.margin = margin(t = 0.009,  r = 0.1, b = 0.009, l = 0.1, unit = \"npc\"),\n        axis.text.y = element_text(size=16),\n        axis.title.y = element_text(size=16),\n        axis.title.x = element_text(size=16),\n        axis.text.x = element_text(size=16),\n        legend.text = element_text(size=16),\n        text = element_text(family=\"Avenir Next\"),\n        legend.title = element_blank())"
  }
]