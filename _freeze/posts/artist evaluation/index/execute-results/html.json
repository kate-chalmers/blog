{
  "hash": "9ac7a2bad0a0cf752167a486133909a2",
  "result": {
    "markdown": "---\ntitle: \"Post #2: I don't want peace, I want problems, always\"\ndate: 'July 11, 2023'\nimage: \"image.jpg\"\nexecute:\n  message: false\n  warning: false\n---\n\n\n<style>\n\n#title-block-header {\n  margin-block-end: 1rem;\n  position: relative;\n  margin-top: -1px;\n  background: #f6ba52\n}\n\n#quarto-header > nav {\n  background: #ffd180 !important;\n}\n\n.quarto-title-banner {\n  margin-block-end: 1rem;\n  position: relative;\n  background: #ffd180\n}\n\n</style>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(spotifyr)\nlibrary(ggtext)\n\n# Stored API code in config folder and added to gitignore file\n# source(\"./posts/spotify api/config.R\")\nsource(\"./config.R\")\n\n# Access API username + id\nSys.setenv(SPOTIFY_CLIENT_ID = spotify_id)\nSys.setenv(SPOTIFY_CLIENT_SECRET = spotify_code)\n\nspotify_access_token <- get_spotify_access_token()\n\nspotify_id <- function(artist_name) {\n  \n  # Removed print so there is no echo in Quarto doc\n  artist_id <- search_spotify(artist_name, type = \"artist\") %>%\n    select(id) %>%\n    slice(1) %>%\n    as.character()\n  \n  return(artist_id)\n   \n}\n\nartists_i_like <- c(\"Taylor Swift\", \n                    \"Bon Iver\",\n                    \"Leif Vollebekk\",\n                    \"Glass Animals\",\n                    \"Noah Kahan\",\n                    \"Hozier\")\n\n# Practice with lapply + map :)\ndat <- lapply(artists_i_like, search_spotify, type = \"artist\") \n\nartists <- dat %>% \n  map( ~ .x %>% \n         as.data.frame() %>%\n         slice(1) %>%\n         pull(id)) %>%\n  unlist() %>%\n  # Use map instead of a loop to keep a clean env\n  map( ~ .x %>%\n         get_artist_audio_features(.,\n                                   include_groups = \"album\",\n                                   authorization = spotify_access_token)) %>%\n  do.call(rbind.data.frame, .)\n\nannotater <- function(x_val, y_val, text_used) {\n  annotate(\"richtext\", x = x_val, y = y_val, label = text_used, size = 6, alpha=0.9, label.color = NA, family=\"Avenir Next\")\n\n}\n\n# Apparently I don't like peace ;(\nartists |>\n  # Feed into ggplot\n  ggplot(aes(y=energy,x=valence,color=artist_name))+\n  geom_point(aes(shape=artist_name), size = 2)+\n  geom_hline(yintercept = 0.5)+\n  geom_vline(xintercept = 0.5)+\n  annotater(x_val = 0.1, y_val = 1, text_used = \"Turbulent/Angry\") +\n  annotater(x_val = 0.8, y_val = 1, text_used = \"Happy/Joyful\") +\n  annotater(x_val = 0.1, y_val = 0.1, text_used = \"Sad/Depressing\") +\n  annotater(x_val = 0.8, y_val = 0.1, text_used = \"Chill/Peaceful\") +\n  # Threw in oecdplot package for fun\n  oecdplot::scale_colour_oecd_d(option=\"ppt\") +\n  theme_light() + \n  scale_shape_manual(values = c(1:8))+\n  labs(y = \"Energy\", x = \"Valence\") +\n  theme(legend.position = \"top\",\n        legend.margin = margin(t = 0.009,  r = 0.1, b = 0.009, l = 0.1, unit = \"npc\"),\n        axis.text.y = element_text(size=16),\n        axis.title.y = element_text(size=16),\n        axis.title.x = element_text(size=16),\n        axis.text.x = element_text(size=16),\n        legend.text = element_text(size=16),\n        text = element_text(family=\"Avenir Next\"),\n        legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}