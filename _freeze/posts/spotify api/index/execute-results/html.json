{
  "hash": "67328d1016ad7f966ac3a5317814dca5",
  "result": {
    "markdown": "---\ntitle: \"Post #1: Blog Post (Taylor's Version)\"\ndate: \"2023-06-25\"\nimage: \"image.jpg\"\nexecute:\n  message: false\n  warning: false\n---\n\n\n<style>\n\n#title-block-header {\n  margin-block-end: 1rem;\n  position: relative;\n  margin-top: -1px;\n  background: #f6ba52\n}\n\n#quarto-header > nav {\n  background: #ffd180 !important;\n}\n\n.quarto-title-banner {\n  margin-block-end: 1rem;\n  position: relative;\n  background: #ffd180\n}\n\n</style>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(spotifyr)\nlibrary(ggridges)\nlibrary(RColorBrewer)\n\n# Stored API code in config folder and added to gitignore file\nsource(\"./config.R\")\n\n# Access API username + id\nSys.setenv(SPOTIFY_CLIENT_ID = spotify_id)\nSys.setenv(SPOTIFY_CLIENT_SECRET = spotify_code)\n\nspotify_access_token <- get_spotify_access_token()\n\nspotify_id <- function(artist_name) {\n  \n  # Removed print so there is no echo in Quarto doc\n  artist_id <- search_spotify(artist_name, type = \"artist\") %>%\n    select(id) %>%\n    slice(1) %>%\n    as.character()\n  \n  return(artist_id)\n   \n}\n\ntswift_id <- spotify_id(\"Taylor Swift\")\n\n# Pull Taylor's music\ntswift_spotify <- spotifyr::get_artist_audio_features(\n  artist = tswift_id,\n  include_groups = \"album\",\n  authorization = spotify_access_token\n)\n\n# Filter for Taylor's Version + Originals\ntaylors_version <- tswift_spotify %>%\n  filter(grepl(\"Taylor's Version\", album_name) | grepl(\"Red\", album_name) | grepl(\"Fearless\", album_name)) %>%\n  filter(!grepl(\"International\", album_name)) \n\n\n# Added some factoring and text decoration\ntaylors_version |>\n  mutate(album_name = ifelse(grepl(\"Taylor's Version\", album_name), paste0(\"<b>\", album_name, \"</b>\"), album_name),\n         album_name = factor(album_name, c(\"Red (Deluxe Edition)\", \"<b>Red (Taylor's Version)</b>\", \"Fearless (Platinum Edition)\", \"<b>Fearless (Taylor's Version)</b>\"))\n  ) %>%\n  tidyr::pivot_longer(cols = c(\"valence\",\"tempo\",\"danceability\",\"energy\", \"speechiness\", \"acousticness\"), names_to = \"metric\") |>\n  ggplot(aes(x = value, y = album_name, fill=factor(metric))) +\n    geom_density_ridges(show.legend = FALSE) +\n    theme_ridges() +\n    labs(title = \"Taylor Swift - Musical features of studio albums for original releases vs. re-recordings\",\n         subtitle = \"Based on Spotify's Web API with spotifyr\",\n         y=NULL,\n         x=NULL)+\n    facet_wrap(~metric, scales = \"free_x\", nrow = 2,\n               labeller = as_labeller(\n                 c(`danceability`=\"Danceability\", \n                   `energy` = \"Energy\",\n                   `acousticness` = \"Acousticness\", \n                   `speechiness` = \"Speechiness\",\n                   `tempo` = \"Tempo\", \n                   `valence` = \"Valence\")\n               ))+\n    rcartocolor::scale_fill_carto_d(palette=\"Temps\") +\n  theme(plot.title.position =  \"plot\",\n        text = element_text(family=\"Avenir Next\"),\n        axis.text.y=ggtext::element_markdown())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}